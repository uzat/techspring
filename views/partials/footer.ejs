<!-- views/partials/footer.ejs -->
    <footer class="footer">
        <div class="footer-container">
            <div class="footer-content">
                <div class="footer-section">
                    <h3>TechSpring</h3>
                    <p>AI Innovation & Technology Solutions</p>
                    <p>Mornington Peninsula, Victoria, Australia</p>
                </div>
                <div class="footer-section">
                    <h4>Quick Links</h4>
                    <ul>
                        <li><a href="/">Home</a></li>
                        <li><a href="/about">About</a></li>
                        <li><a href="/blog">Blog</a></li>
                        <li><a href="/contact">Contact</a></li>
                    </ul>
                </div>
                <div class="footer-section">
                    <h4>Connect</h4>
                    <p>Phone: 0481 261 015</p>
                    <p><a href="/acknowledgment">Acknowledgment of Country</a></p>
                </div>
            </div>
            <div class="footer-bottom">
                <p>&copy; 2025 TechSpring Pty Ltd. All rights reserved.</p>
            </div>
        </div>
    </footer>

    <script src="/js/main.js"></script>
    <% if (currentPage === 'home') { %>
        <script src="https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js"></script>
        <script src="/js/particles-config.js"></script>
    <% } %>
    <script>
// Updated Rotating Effects System - Split between Hero and Features
// Updated Rotating Effects System - Chrome Sphere Replaced
class SplitRotatingEffects {
    constructor() {
        this.heroEffects = ['aiProcessing'];
        // Removed chromeSphere, added floatingShapes
        this.featuresEffects = ['floatingShapes', 'typedText', 'neuralNetwork'];
        
        this.heroEffect = this.selectHeroEffect();
        this.featuresEffect = this.selectFeaturesEffect();
        
        this.init();
    }
    
    selectHeroEffect() {
        // AI Status appears 30% of the time, otherwise no hero effect
        return Math.random() < 0.3 ? 'aiProcessing' : null;
    }
    
    selectFeaturesEffect() {
        // Always show a features effect, avoid repeating the last one
        const lastEffect = localStorage.getItem('lastFeaturesEffect');
        let availableEffects = this.featuresEffects.filter(effect => effect !== lastEffect);
        
        if (availableEffects.length === 0) {
            availableEffects = this.featuresEffects;
        }
        
        const selectedEffect = availableEffects[Math.floor(Math.random() * availableEffects.length)];
        localStorage.setItem('lastFeaturesEffect', selectedEffect);
        return selectedEffect;
    }
    
    init() {
        console.log(`Loading hero effect: ${this.heroEffect || 'none'}`);
        console.log(`Loading features effect: ${this.featuresEffect}`);
        
        // Hide all effect containers
        document.querySelectorAll('.effect-container').forEach(container => {
            container.style.display = 'none';
        });
        
        // Initialize hero effect (if any)
        if (this.heroEffect) {
            this.initHeroEffect(this.heroEffect);
        }
        
        // Initialize features effect
        this.initFeaturesEffect(this.featuresEffect);
    }
    
    initHeroEffect(effect) {
        switch(effect) {
            case 'aiProcessing':
                this.initAIProcessing();
                break;
        }
    }
    
    initFeaturesEffect(effect) {
        switch(effect) {
            case 'floatingShapes':
                this.initFloatingShapes();
                break;
            case 'typedText':
                this.initTypedText();
                break;
            case 'neuralNetwork':
                this.initNeuralNetwork();
                break;
        }
    }
    
    initFloatingShapes() {
        const container = document.getElementById('floating-shapes-container');
        container.style.display = 'block';
        
        const canvas = document.getElementById('floating-shapes-canvas');
        const ctx = canvas.getContext('2d');
        
        // Get features section dimensions
        const featuresSection = document.querySelector('.features');
        const rect = featuresSection.getBoundingClientRect();
        
        canvas.width = rect.width;
        canvas.height = rect.height;
        
        const shapes = [];
        
        // Create floating geometric shapes
        for (let i = 0; i < 8; i++) {
            shapes.push({
                x: Math.random() * canvas.width,
                y: Math.random() * canvas.height,
                vx: (Math.random() - 0.5) * 1,
                vy: (Math.random() - 0.5) * 1,
                size: Math.random() * 30 + 20,
                rotation: 0,
                rotationSpeed: (Math.random() - 0.5) * 0.02,
                type: Math.floor(Math.random() * 3), // 0: square, 1: triangle, 2: hexagon
                opacity: Math.random() * 0.3 + 0.1
            });
        }
        
        function drawShape(ctx, shape) {
            ctx.save();
            ctx.translate(shape.x, shape.y);
            ctx.rotate(shape.rotation);
            ctx.strokeStyle = `rgba(0, 212, 170, ${shape.opacity})`;
            ctx.lineWidth = 2;
            
            switch(shape.type) {
                case 0: // Square
                    ctx.strokeRect(-shape.size/2, -shape.size/2, shape.size, shape.size);
                    break;
                case 1: // Triangle
                    ctx.beginPath();
                    ctx.moveTo(0, -shape.size/2);
                    ctx.lineTo(-shape.size/2, shape.size/2);
                    ctx.lineTo(shape.size/2, shape.size/2);
                    ctx.closePath();
                    ctx.stroke();
                    break;
                case 2: // Hexagon
                    ctx.beginPath();
                    for (let i = 0; i < 6; i++) {
                        const angle = (i * Math.PI) / 3;
                        const x = Math.cos(angle) * shape.size/2;
                        const y = Math.sin(angle) * shape.size/2;
                        if (i === 0) ctx.moveTo(x, y);
                        else ctx.lineTo(x, y);
                    }
                    ctx.closePath();
                    ctx.stroke();
                    break;
            }
            ctx.restore();
        }
        
        function animate() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            shapes.forEach(shape => {
                // Update position
                shape.x += shape.vx;
                shape.y += shape.vy;
                shape.rotation += shape.rotationSpeed;
                
                // Bounce off edges
                if (shape.x < 0 || shape.x > canvas.width) shape.vx *= -1;
                if (shape.y < 0 || shape.y > canvas.height) shape.vy *= -1;
                
                // Draw shape
                drawShape(ctx, shape);
            });
            
            requestAnimationFrame(animate);
        }
        animate();
        
        // Handle resize
        window.addEventListener('resize', () => {
            const newRect = featuresSection.getBoundingClientRect();
            canvas.width = newRect.width;
            canvas.height = newRect.height;
        });
    }
    
    initTypedText() {
        const container = document.getElementById('typed-container');
        container.style.display = 'block';
        
        const options = {
            strings: [
                'Advanced AI Solutions',
                'Cutting-Edge Technology', 
                'Innovation in Action',
                'Future Tech Today'
            ],
            typeSpeed: 80,
            backSpeed: 40,
            backDelay: 2500,
            loop: true,
            showCursor: true,
            cursorChar: '|'
        };
        
        new Typed('#typed-text', options);
    }
    
    initNeuralNetwork() {
        const container = document.getElementById('neural-network');
        container.style.display = 'block';
        
        const canvas = document.getElementById('neural-canvas');
        const ctx = canvas.getContext('2d');
        
        // Get features section dimensions
        const featuresSection = document.querySelector('.features');
        const rect = featuresSection.getBoundingClientRect();
        
        canvas.width = rect.width;
        canvas.height = rect.height;
        
        const nodes = [];
        
        // Create nodes
        for (let i = 0; i < 40; i++) {
            nodes.push({
                x: Math.random() * canvas.width,
                y: Math.random() * canvas.height,
                vx: (Math.random() - 0.5) * 1.5,
                vy: (Math.random() - 0.5) * 1.5,
                radius: Math.random() * 2 + 1
            });
        }
        
        function animate() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Update nodes
            nodes.forEach(node => {
                node.x += node.vx;
                node.y += node.vy;
                
                if (node.x < 0 || node.x > canvas.width) node.vx *= -1;
                if (node.y < 0 || node.y > canvas.height) node.vy *= -1;
                
                // Draw node
                ctx.beginPath();
                ctx.arc(node.x, node.y, node.radius, 0, Math.PI * 2);
                ctx.fillStyle = '#00d4aa';
                ctx.fill();
            });
            
            // Draw connections
            nodes.forEach((node, i) => {
                nodes.slice(i + 1).forEach(otherNode => {
                    const dist = Math.sqrt(
                        Math.pow(node.x - otherNode.x, 2) + 
                        Math.pow(node.y - otherNode.y, 2)
                    );
                    
                    if (dist < 120) {
                        ctx.beginPath();
                        ctx.moveTo(node.x, node.y);
                        ctx.lineTo(otherNode.x, otherNode.y);
                        ctx.strokeStyle = `rgba(0, 212, 170, ${(1 - dist / 120) * 0.6})`;
                        ctx.lineWidth = 1;
                        ctx.stroke();
                    }
                });
            });
            
            requestAnimationFrame(animate);
        }
        animate();
        
        // Handle resize
        window.addEventListener('resize', () => {
            const newRect = featuresSection.getBoundingClientRect();
            canvas.width = newRect.width;
            canvas.height = newRect.height;
        });
    }
    
    initAIProcessing() {
        const container = document.getElementById('ai-processing');
        container.style.display = 'block';
        
        const metrics = [
            { id: 'neural', max: 95 },
            { id: 'data', max: 87 },
            { id: 'model', max: 92 }
        ];
        
        metrics.forEach((metric, index) => {
            setTimeout(() => {
                this.animateMetric(metric.id, metric.max);
            }, index * 800);
        });
    }
    
    animateMetric(id, targetValue) {
        const fill = document.getElementById(`${id}-fill`);
        const value = document.getElementById(`${id}-value`);
        let current = 0;
        
        const interval = setInterval(() => {
            current += Math.random() * 3;
            if (current >= targetValue) {
                current = targetValue;
                clearInterval(interval);
            }
            
            fill.style.width = `${current}%`;
            value.textContent = `${Math.round(current)}%`;
        }, 50);
    }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    // Only initialize if we're on a page with the effect containers
    if (document.querySelector('.hero-effects-container') && document.querySelector('.features-effects-container')) {
        new SplitRotatingEffects();
    }
});

// Enhanced Weather System for TechSpring
class WeatherSystem {
    constructor() {
        this.apiKey = null; // Set this when you get your OpenWeatherMap API key
        this.apiUrl = 'https://api.openweathermap.org/data/2.5/weather';
        this.fallbackData = this.generateIntelligentFallback();
        this.lastUpdate = null;
        this.updateInterval = 15 * 60 * 1000; // 15 minutes
        this.locationCache = null;
    }

    async init() {
        try {
            // Get user location first
            await this.detectLocation();
            
            // Update weather data
            await this.updateWeather();
            
            // Set up periodic updates
            setInterval(() => {
                this.updateWeather();
            }, this.updateInterval);
            
        } catch (error) {
            console.log('Weather system initialized with fallback data');
            this.displayWeather(this.fallbackData);
        }
    }

    async detectLocation() {
        try {
            // Try to get location without hammering the API
            if (this.locationCache && (Date.now() - this.locationCache.timestamp < 60 * 60 * 1000)) {
                return this.locationCache.data;
            }

            const response = await fetch('http://ip-api.com/json/', {
                timeout: 5000
            });
            
            if (!response.ok) {
                throw new Error('Location service unavailable');
            }
            
            const locationData = await response.json();
            
            // Cache the location data for 1 hour
            this.locationCache = {
                data: locationData,
                timestamp: Date.now()
            };
            
            return locationData;
            
        } catch (error) {
            console.log('Using default location (Melbourne)');
            return {
                city: 'Melbourne',
                region: 'Victoria',
                country: 'Australia',
                lat: -37.8136,
                lon: 144.9631,
                timezone: 'Australia/Melbourne'
            };
        }
    }

    async getWeatherData(location) {
        if (!this.apiKey) {
            console.log('No weather API key - using intelligent fallback');
            return this.generateLocationBasedFallback(location);
        }

        try {
            const url = `${this.apiUrl}?lat=${location.lat}&lon=${location.lon}&appid=${this.apiKey}&units=metric`;
            const response = await fetch(url, { timeout: 8000 });
            
            if (!response.ok) {
                throw new Error(`Weather API error: ${response.status}`);
            }
            
            const data = await response.json();
            return this.formatWeatherData(data, location);
            
        } catch (error) {
            console.log('Weather API unavailable, using fallback');
            return this.generateLocationBasedFallback(location);
        }
    }

    formatWeatherData(apiData, location) {
        return {
            location: `${location.city}, ${location.region}`,
            temperature: Math.round(apiData.main.temp),
            description: apiData.weather[0].description,
            humidity: apiData.main.humidity,
            windSpeed: Math.round(apiData.wind.speed * 3.6), // Convert m/s to km/h
            icon: this.getWeatherIcon(apiData.weather[0].main),
            timestamp: Date.now(),
            source: 'live'
        };
    }

    generateLocationBasedFallback(location) {
        const city = location.city || 'Melbourne';
        const region = location.region || 'Victoria';
        
        // Generate realistic weather based on location and season
        const isAustralian = location.country === 'Australia';
        const currentMonth = new Date().getMonth(); // 0-11
        
        let baseTemp, conditions;
        
        if (isAustralian) {
            // Australian seasons (opposite to northern hemisphere)
            const isSummer = currentMonth >= 11 || currentMonth <= 1; // Dec, Jan, Feb
            const isWinter = currentMonth >= 5 && currentMonth <= 7;   // Jun, Jul, Aug
            
            if (isSummer) {
                baseTemp = Math.floor(Math.random() * 15) + 20; // 20-35°C
                conditions = ['sunny', 'partly cloudy', 'hot'][Math.floor(Math.random() * 3)];
            } else if (isWinter) {
                baseTemp = Math.floor(Math.random() * 10) + 8;  // 8-18°C
                conditions = ['overcast', 'light rain', 'cloudy'][Math.floor(Math.random() * 3)];
            } else {
                baseTemp = Math.floor(Math.random() * 12) + 15; // 15-27°C
                conditions = ['partly cloudy', 'sunny', 'overcast'][Math.floor(Math.random() * 3)];
            }
        } else {
            // Northern hemisphere
            const isSummer = currentMonth >= 5 && currentMonth <= 7;
            const isWinter = currentMonth >= 11 || currentMonth <= 1;
            
            if (isSummer) {
                baseTemp = Math.floor(Math.random() * 15) + 18; // 18-33°C
                conditions = ['sunny', 'partly cloudy', 'warm'][Math.floor(Math.random() * 3)];
            } else if (isWinter) {
                baseTemp = Math.floor(Math.random() * 15) + 0;  // 0-15°C
                conditions = ['snow', 'overcast', 'cold'][Math.floor(Math.random() * 3)];
            } else {
                baseTemp = Math.floor(Math.random() * 15) + 10; // 10-25°C
                conditions = ['partly cloudy', 'overcast', 'mild'][Math.floor(Math.random() * 3)];
            }
        }

        return {
            location: `${city}, ${region}`,
            temperature: baseTemp,
            description: conditions,
            humidity: Math.floor(Math.random() * 30) + 45, // 45-75%
            windSpeed: Math.floor(Math.random() * 20) + 5,  // 5-25 km/h
            icon: this.getWeatherIcon(conditions),
            timestamp: Date.now(),
            source: 'estimated'
        };
    }

    generateIntelligentFallback() {
        return {
            location: 'Melbourne, Victoria',
            temperature: 18,
            description: 'partly cloudy',
            humidity: 65,
            windSpeed: 12,
            icon: '🌤️',
            timestamp: Date.now(),
            source: 'default'
        };
    }

    getWeatherIcon(condition) {
        const iconMap = {
            'clear': '☀️',
            'sunny': '☀️',
            'partly cloudy': '🌤️',
            'cloudy': '☁️',
            'overcast': '☁️',
            'rain': '🌧️',
            'light rain': '🌦️',
            'heavy rain': '🌧️',
            'snow': '❄️',
            'thunderstorm': '⛈️',
            'fog': '🌫️',
            'hot': '🌡️',
            'cold': '🥶',
            'warm': '🌤️',
            'mild': '🌤️'
        };
        
        return iconMap[condition.toLowerCase()] || '🌤️';
    }

    async updateWeather() {
        try {
            const location = await this.detectLocation();
            const weatherData = await this.getWeatherData(location);
            
            this.lastUpdate = Date.now();
            this.displayWeather(weatherData);
            
            console.log(`Weather updated for ${weatherData.location} (${weatherData.source})`);
            
        } catch (error) {
            console.log('Weather update failed, using fallback');
            this.displayWeather(this.fallbackData);
        }
    }

    displayWeather(weatherData) {
        const weatherElement = document.getElementById('weather-info');
        if (!weatherElement) return;

        const statusIndicator = weatherData.source === 'live' ? '' : 
                               weatherData.source === 'estimated' ? ' ~' : ' *';

        weatherElement.innerHTML = `
            <span>${weatherData.icon} ${weatherData.temperature}°C - ${weatherData.description}</span>
            <span class="ticker-separator">•</span>
            <span>💧 ${weatherData.humidity}% | 💨 ${weatherData.windSpeed} km/h</span>
            <span class="ticker-separator">•</span>
            <span>${weatherData.location}${statusIndicator}</span>
        `;
    }

    // Method to set API key when you get one
    setApiKey(apiKey) {
        this.apiKey = apiKey;
        console.log('Weather API key configured - switching to live data');
        this.updateWeather(); // Immediately update with live data
    }
}

// Initialize weather system
let weatherSystem;

d// Initialize weather system ONLY on homepage
document.addEventListener('DOMContentLoaded', () => {
    // Only run weather on homepage where ticker exists
    if (document.getElementById('weather-info') && document.querySelector('.hero')) {
        weatherSystem = new WeatherSystem();
        weatherSystem.init();
    }
});

// Function to add API key later (call this when you get your key)
function configureWeatherAPI(apiKey) {
    if (weatherSystem) {
        weatherSystem.setApiKey(apiKey);
    }
}
    </script>
</body>
</html>